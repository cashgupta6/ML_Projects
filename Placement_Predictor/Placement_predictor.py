# -*- coding: utf-8 -*-
"""kaggle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wLR3EGV30o4HYiskVgCEZN9C1F48Lq12
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pandas.plotting import scatter_matrix
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn import svm
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import Lasso
from sklearn.linear_model import Ridge
from sklearn.externals import joblib
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.model_selection import GridSearchCV
# %matplotlib inline

df = pd.read_csv('/content/drive/MyDrive/college/college.csv')
df

df.info()

df.groupby('Stream').agg('count')

sns.catplot(x="PlacedOrNot", y="Internships", kind="bar", data=df)

df["Gender"].replace({"Male": 0, "Female": 1}, inplace=True)

df["Stream"].replace({"Computer Science": 0, "Electronics And Communication": 1,"Information Technology":2,"Mechanical":3,"Electrical":4, "Civil":5}, inplace=True)

df

corr_matrix = df.corr()
corr_matrix['PlacedOrNot'].sort_values(ascending = False)

sns.heatmap(corr_matrix)

df1 = df.drop(columns=['Gender', 'HistoryOfBacklogs', 'Hostel'])
df1.head(10)

"""Extracting X and Y value for traing the dataset."""

x = df.drop(columns=['Gender', 'HistoryOfBacklogs', 'Hostel','PlacedOrNot'])
y = df['PlacedOrNot']

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.3)

model_params = {
    'linear_regression': {
        'model': LinearRegression(),
        'params' : {
        }  
    },
    'DecisionTreeClassifier': {
        'model': DecisionTreeClassifier(),
        'params' : {
        }  
    },
    'Lasso': {
        'model': Lasso(),
        'params' : {
        }  
    },
    'Ridge': {
        'model': Ridge(),
        'params' : {
            'alpha':[0.1]
        }  
    },
    'svm': {
        'model': svm.SVC(gamma='auto'),
        'params' : {
            'C': [1,10,20],
            'kernel': ['rbf','linear']
        }  
    },
    'random_forest': {
        'model': RandomForestClassifier(),
        'params' : {
            'n_estimators': [1,5,10]
        }
    },
    'logistic_regression' : {
        'model': LogisticRegression(solver='liblinear',multi_class='auto'),
        'params': {
            'C': [1,5,10]
        }
    }
}

scores = []
for model_name, mp in model_params.items():
    clf =  GridSearchCV(mp['model'], mp['params'], cv=5, return_train_score=False)
    clf.fit(x_train, y_train)
    scores.append({
        'model': model_name,
        'best_score': clf.best_score_,
        'best_params': clf.best_params_
    })
models_used = pd.DataFrame(scores,columns=['model','best_score','best_params'])

models_used = models_used.sort_values('best_score',ascending = False)
models_used

max = models_used.max().model
model = model_params[max]['model']
model = model.fit(x_train,y_train)

column_strt = 0
column_end = 10
predicted = []
actual = df.result.iloc[column_strt:column_end]
df.result = df.PlacedOrNot
length = len(df1.iloc[0])
for i in range(column_strt,column_end):
  arr = df1.iloc[i][:length-1].values
  predict = int(model.predict([arr])[0])
  predicted.append(predict)
actual = pd.DataFrame(actual)
predicted = pd.DataFrame(predicted)
final = pd.concat([actual, predicted.reindex(actual.index)], axis=1)
final = final.rename(columns = {'PlacedOrNot': 'Actual Values',0:'predicted Values'})
final

df.result = df.PlacedOrNot
arr =[22,3,0,8]

input = np.array(arr)
predicted = model.predict([input])[0]
Actual = df.result.iloc[4]
print('The Predicted value is: ', predicted)
print('The Actual value is: ', Actual)

cd /content/drive/MyDrive/college

joblib.dump(model, 'model.pkl')