# -*- coding: utf-8 -*-
"""kaggle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wLR3EGV30o4HYiskVgCEZN9C1F48Lq12
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
from pandas.plotting import scatter_matrix
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import Lasso
from sklearn.linear_model import Ridge
from sklearn.externals import joblib
# %matplotlib inline

"""Read the file"""

df = pd.read_csv('/content/drive/MyDrive/Sonar_Rock_Vs_Mine/Copy of sonar data.csv')

df.head()

"""Data Exploration and Analysis"""

df.info()

df1 = df.replace({'R':0, 'M':1})

df1.head()

df1.groupby('R').agg('count')

"""Correlation Matrix"""

corr_matrix = df1.corr()
corr_matrix['R'].sort_values(ascending = False)

"""Plotting Scatter plot of High correlation columns"""

att = ['0.1609','0.1582','0.0383','0.8507']
pd.plotting.scatter_matrix(df1[att], alpha=0.8, figsize = (20,15))

"""Taking Training and Test dataset from original dataset"""

x = df1.drop(['R'],axis = 'columns')
y = df1['R']

"""splitting into training and testing data"""

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3, random_state = 1)

"""Applying Linear Regression and finding accuracy


"""

model = LinearRegression()
model.fit(x_train,y_train)
model.score(x_test,y_test)

"""Applying Logistic Regression and finding accuracy

"""

model = LogisticRegression()
model.fit(x_train,y_train)
model.score(x_test,y_test)

"""Applying SVC technique  and finding accuracy

"""

model = SVC()
model.fit(x_train,y_train)
model.score(x_test,y_test)

"""Applying Decision Tree Classifier and finding accuracy

"""

model = DecisionTreeClassifier()
model.fit(x_train,y_train)
model.score(x_test,y_test)

"""Applying Lasso Technique and finding accuracy

"""

model = Lasso()
model.fit(x_train,y_train)
model.score(x_test,y_test)

"""Applying Ridge Technique and finding accuracy"""

model = Ridge(alpha=0.1)
model.fit(x_train,y_train)
model.score(x_test,y_test)

"""The best model was SVC model with around 85% accuracy applying it"""

model = SVC()
model.fit(x_train,y_train)
model.score(x_test,y_test)

"""Saving the model for further use"""

joblib.dump(model, 'model.pkl')