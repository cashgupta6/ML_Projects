# -*- coding: utf-8 -*-
"""kaggle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wLR3EGV30o4HYiskVgCEZN9C1F48Lq12
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pandas.plotting import scatter_matrix
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import Lasso
from sklearn.linear_model import Ridge
from sklearn.externals import joblib
import seaborn as sns
# %matplotlib inline

df = pd.read_csv('/content/drive/MyDrive/equality/winequality.csv')
df

df.info()

df.describe()

"""Correlation Matrix"""

corr_matrix = df.corr()
corr_matrix['quality'].sort_values(ascending = False)

"""Plotting Graph"""

df1 = df[['alcohol','sulphates','citric acid', 'volatile acidity','quality']]
pd.plotting.scatter_matrix(df1, alpha=0.2, figsize= (20,15))

sns.catplot(x = 'quality', data = df, kind = 'count')

sns.catplot(x = 'fixed acidity', data = df, kind = 'count')

sns.barplot(x = 'quality', y = 'volatile acidity', data = df)

sns.barplot(x = 'quality', y = 'citric acid', data = df)

"""Plotting Heatmap"""

plt.subplots(figsize=(20,15))
sns.heatmap(corr_matrix,cbar = True,square = True, fmt = '.1f', annot = True, annot_kws = {'size':8}, cmap = 'Blues')

"""Getting X and Y attributes for training the model"""

x = df.drop(columns = ['quality'])
y = df['quality']

"""Splitting attributes into training and testing dataset"""

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.3)

len(x_test)

"""Function to check best model for training the dataset"""

def check(model):
  score = 0
  for model in model:
    model.fit(x_train,y_train)
    model_name = type(model).__name__
    temp_score = model.score(x_test,y_test)
    if temp_score>score:
      score = temp_score
      model_name_best = model_name
      model_final = model
    print(model_name,temp_score)
    print('\n')
  print('The best model is : ',model_name_best,score)
  print('\n')
  return model_final

"""Input model Array and Getting result"""

model = [LinearRegression(),LogisticRegression(), SVC(), DecisionTreeClassifier(), Lasso(),Ridge()]
model = check(model)

"""Tesing the predicted value of model with Actual value"""

df.result = df.quality
arr = [6.0,0.310,0.47,3.6,0.067,18.0,42.0,0.99549,3.39,0.66,11.0]

input = np.array(arr)
predicted = model.predict([input])[0]
Actual = df.result.iloc[1598]
print('The Predicted value is: ', predicted)
print('The Actual value is: ', Actual)

cd /content/drive/MyDrive/quality

joblib.dump(model, 'model.pkl')