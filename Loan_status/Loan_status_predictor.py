# -*- coding: utf-8 -*-
"""kaggle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wLR3EGV30o4HYiskVgCEZN9C1F48Lq12
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pandas.plotting import scatter_matrix
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import Lasso
from sklearn.linear_model import Ridge
from sklearn.externals import joblib
import seaborn as sns
# %matplotlib inline

"""Read the file"""

df = pd.read_csv('/content/drive/MyDrive/Loan_status/data.csv')
df.head()

"""Data Exploration"""

df.info()

df.isnull().sum()

df = df.dropna()

df.isnull().sum()

df.describe()

"""Graph Plotting """

sns.countplot(x = 'Education',hue = 'Loan_Status',data = df)

sns.countplot(x = 'Married',hue = 'Loan_Status',data = df)

sns.countplot(x = 'Self_Employed',hue = 'Loan_Status',data = df)

plt.scatter(df.ApplicantIncome,df.LoanAmount)

"""Categorical to numerical conversion"""

plt.scatter(df.CoapplicantIncome,df.LoanAmount)

df = df.replace({'Gender':{'Male': ' 0','Female': '1'}, 'Married':{'No': ' 0','Yes': '1'},'Education':{'Not Graduate': ' 0','Graduate': '1'}, 'Self_Employed':{'No': ' 0','Yes': '1'}, 'Property_Area':{'Urban': ' 0','Rural': '1','Semiurban':'3'},  'Loan_Status':{'N': ' 0','Y': '1'},'Dependents':{'3+': ' 4'}})

df

"""Getting X and Y attributes for training the model"""

x = df.drop(columns = ['Loan_ID', 'Loan_Status'])
y = df['Loan_Status']

"""Splitting attributes into training and testing dataset"""

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.3)

len(x_test)

"""Function to check best model for training the dataset"""

def check(model):
  score = 0
  for model in model:
    model.fit(x_train,y_train)
    model_name = type(model).__name__
    temp_score = model.score(x_test,y_test)
    if temp_score>score:
      score = temp_score
      model_name_best = model_name
      model_final = model
    print(model_name,temp_score)
    print('\n')
  print('The best model is : ',model_name_best,score)
  print('\n')
  return model_final

"""Input model Array and Getting result"""

model = [LinearRegression(),LogisticRegression(), SVC(), DecisionTreeClassifier(), Lasso(),Ridge()]
model = check(model)

"""Tesing the predicted value of model with Actual value"""

arr = [0,1,2,1,1,5417,4196.0,267.0,360.0,1.0,0]
input = np.array(arr)
predicted = model.predict([input])[0]
Actual = df.Loan_Status.iloc[5]
print('The Predicted value is: ', predicted)
print('The Actual value is: ', Actual)

cd /content/drive/MyDrive/Loan_status

joblib.dump(model, 'model.pkl')