# -*- coding: utf-8 -*-
"""kaggle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wLR3EGV30o4HYiskVgCEZN9C1F48Lq12
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pandas.plotting import scatter_matrix
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn import svm
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import Lasso
from sklearn.linear_model import Ridge
from sklearn.externals import joblib
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.model_selection import GridSearchCV
from sklearn.impute import SimpleImputer

# %matplotlib inline

df = pd.read_csv('/content/drive/MyDrive/insurance/insurance.csv')
df

df.info()

df.describe()

df.groupby('region').agg('count')

df.groupby('children').agg('count')

df = df.replace({'children': {5:4}})
df.groupby('children').agg('count')

sns.catplot(x = 'sex', y = 'charges',kind = 'bar', data = df)

sns.catplot(x = 'region', y = 'charges',kind = 'bar', data = df)

sns.catplot(x = 'smoker', y = 'charges',kind = 'bar', data = df)

sns.catplot(x = 'age', y = 'charges', data = df)

"""Converting categorical data into numerical data"""

df['sex'] = df['sex'].replace({'male':0, 'female':1})

df['region'] = df['region'].replace({'northeast':0, 'northwest':1, 'southeast':2,'southwest':3})

df['smoker'] = df['smoker'].replace({'no':0, 'yes':1})

df

"""Correlation Matrix"""

corr_matrix = df.corr()
corr_matrix['charges'].sort_values(ascending = False)

sns.heatmap(corr_matrix)

df1 = df.drop(columns=['children', 'region', 'charges'])

"""Extracting X and Y value for traing the dataset."""

x = df1
y = df['charges']

y = y.astype(int)

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.3)

"""Types of model we will used is stored in a dict format in model_params"""

model_params = {
    'linear_regression': {
        'model': LinearRegression(),
        'params' : {
        }  
    },
    'DecisionTreeClassifier': {
        'model': DecisionTreeClassifier(),
        'params' : {
        }  
    },
    'Lasso': {
        'model': Lasso(),
        'params' : {
        }  
    },
    'Ridge': {
        'model': Ridge(),
        'params' : {
            'alpha':[0.1]
        }  
    },
    'svm': {
        'model': svm.SVC(gamma='auto'),
        'params' : {
            'C': [1,10,20],
            'kernel': ['rbf','linear']
        }  
    },
    'random_forest': {
        'model': RandomForestClassifier(),
        'params' : {
            'n_estimators': [1,3,5]
        }
    },
    'logistic_regression' : {
        'model': LogisticRegression(solver='liblinear',multi_class='auto'),
        'params': {
            'C': [1,3,15]
        }
    }
}

"""Fit traing dataset in all models and choose the best one"""

scores = []
for model_name, mp in model_params.items():
    clf =  GridSearchCV(mp['model'], mp['params'], cv=2, return_train_score=False)
    clf.fit(x_train, y_train)
    scores.append({
        'model': model_name,
        'best_score': clf.best_score_,
        'best_params': clf.best_params_
    })
models_used = pd.DataFrame(scores,columns=['model','best_score','best_params'])

"""Choosing best model"""

temp = models_used.sort_values(by=['best_score'],ascending = False)
name = temp.iloc[0].model
model = model_params[name]['model']
model = model.fit(x_train,y_train)

column_strt = 0
column_end = 10
predicted = []
actual = df.charges.iloc[column_strt:column_end]
df.result = df.charges
length = len(df.iloc[0])
for i in range(column_strt,column_end):
  arr = df.iloc[i][:length-1].values
  predict = int(model.predict([arr])[0])
  predicted.append(predict)
actual = pd.DataFrame(actual)
predicted = pd.DataFrame(predicted)
final = pd.concat([actual, predicted.reindex(actual.index)], axis=1)
final = final.rename(columns = {'PlacedOrNot': 'Actual Values',0:'predicted Values'})
final

df.result = df.charges
arr =[28,0,33.000,0]

df1.head()

model

"""Predicting the value"""

input = np.array(arr)
predicted = model.predict([input])[0]
Actual = df.result.iloc[2]
print('The Predicted value is: ', predicted)
print('The Actual value is: ', Actual)

cd /content/drive/MyDrive/insurance

joblib.dump(model, 'model.pkl')